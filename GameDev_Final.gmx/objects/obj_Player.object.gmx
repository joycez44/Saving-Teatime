<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize vars
init_grv = 0.3
grv = init_grv;
accel = .05;
float_accel = .01;
float_reset_speed = true;

hspd = 0;
vspd = 0;
vspd_cap = 16;

mvspd = 4;
jmpspd = 11;
jmpspd_cap = -16;

prev_move = 1;

dbl_jump = true;

image_speed = .15;
float_fuel = 0;

invincibility = false;
drawShield = false;

ini_open("teatime.ini")
shieldTime = ini_read_real("upgrades", "shield", 5);
max_float_fuel = ini_read_real("upgrades", "float", 3);
ini_close();


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create dust cloud system

emit_burst = true;

dust_cloud = part_system_create();
part_system_depth(dust_cloud, 100);

particle1 = part_type_create();
part_type_shape(particle1,pt_shape_disk);
part_type_size(particle1,0.07,0.1,0,0);
part_type_scale(particle1,1,1);
part_type_color1(particle1,9028337);
part_type_speed(particle1,1,1.50,0,0);
part_type_direction(particle1,130,180,0,0);
part_type_gravity(particle1,0,270);
part_type_orientation(particle1,0,0,0,0,1);
part_type_blend(particle1,0);
part_type_life(particle1,5,10);

emitter1 = part_emitter_create(dust_cloud);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Invincibility power up
if (shieldTime == 0) {
    invincibility = false;
    drawShield = false;
    
}
else if (shieldTime &lt; 3) {
    show_debug_message("hello")
    if (drawShield) {
        drawShield = false;
    }
    else {
        drawShield = true;
    }
}

shieldTime -= 0.25
alarm[0] = 0.25 * room_speed
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics and movement

//Check keys
key_right = keyboard_check(ord("D"));
key_left = -keyboard_check(ord("A"));
key_jump = keyboard_check_pressed(ord("W"));
key_float = keyboard_check(vk_space);

hmove = key_right + key_left;

//Move

if (hmove != 0 ) {
    prev_move = hmove;
}

if (place_meeting(x, y + 1, obj_Ice)) {
    hspd = prev_move * (mvspd + 3);
}
else {
    hspd = hmove * mvspd;
}

//Jump
if (key_jump &amp;&amp; !place_meeting(x, y + 1, obj_Ice)) {
    if (place_meeting(x, y+1, obj_Floor) /*|| dbl_jump == true*/) 
    {
        if (!place_meeting(x, y+1, obj_Floor)) {
            dbl_jump = false
        }
        
        if (vspd &lt; -jmpspd) {
            vspd -= jmpspd;
        }
        else  {
            vspd = -jmpspd;
        }
        grv = init_grv;
    }
}

if (vspd &lt; jmpspd_cap) {
    vspd = jmpspd_cap;
}

//Floating
if (key_float &amp;&amp; float_fuel &gt; 0 &amp;&amp; !place_meeting(x, y+1, obj_Floor)) {

    if (float_reset_speed) {
        vspd = 0
        float_reset_speed = false;
    }
        
    if (float_fuel &gt; 1) {
        grv = float_accel;
    }
    else {
        grv = init_grv;
    }
    --float_fuel;
    with (obj_FloatBar) {
        remaining_fuel = obj_Player.float_fuel;   
        if (obj_Player.float_fuel == 0) {
            draw = false
        }
    }
}
else {
    float_reset_speed = true
}

//Gravity
if (vspd &lt;= vspd_cap) 
{
    vspd += grv;
    
    if (!key_float || float_fuel == 0) {
        grv += accel;
    }
} 

//Change sprite direction

if (key_right) {
    image_xscale = 1.0;
    part_type_direction(particle1,130,180,0,0);
}
else if (-key_left) {
    image_xscale = -1.0;
    part_type_direction(particle1,30,90,0,0);
}

//Change sprite
if (!place_meeting(x, y + 1, obj_Floor)) {
    sprite_index = spr_Jump;
}
else if (hmove == 0) {
    sprite_index = spr_Player;
}
else {
    sprite_index = spr_Walking;
}

//Check collisions
if (place_meeting(x + hspd + sign(hspd), y, obj_Floor)) 
{
    while(!place_meeting(x + sign(hspd), y, obj_Floor))
    {
        x += sign(hspd);
    }
    hspd = 0;
}

if ( x + hspd &lt; room_width - 40 &amp;&amp; x + hspd &gt; 40) {  
    x += hspd;
}

if (place_meeting(x, y + vspd, obj_Floor)) 
{
    while (!place_meeting(x, y + sign(vspd), obj_Floor)) 
    {
        y += sign(vspd);
    }
    vspd = 0;
    grv = init_grv;
    dbl_jump = true;
}

y += vspd;

//Check if colliding

if (emit_burst &amp;&amp; place_meeting(x, y+1, obj_Floor) &amp;&amp; hspd != 0 &amp;&amp; !place_meeting(x, y+1, obj_Ice)) {
    part_emitter_region(dust_cloud,emitter1,x,x,y + 60, y + 60,0,0);
    part_emitter_burst(dust_cloud,emitter1,particle1,1);
}
if (emit_burst) {
    emit_burst = false;
}
else  {
    emit_burst = true
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if pitfall

if (y - sprite_get_height(spr_Player) &gt; room_height + 5) 
{
    room_restart()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Camera movement

camera_movement();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Invincible">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>invincibility = true;
drawShield = true;
alarm[0] = .25 * room_speed;

with (other) {
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Trampoline">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///High Jump

with (other) {
    image_speed = .8;
}

if (place_meeting(x, y+1, obj_Trampoline)) 
    {
        vspd = -18
        /*
        if (vspd &lt; -jmpspd) {
            vspd -= jmpspd + 8;
        }
        else  {
            vspd -= jmpspd + 8;
        }
        */
        grv = init_grv;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Umbrella">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Activate power up
float_fuel = max_float_fuel * room_speed

//SHOW FUEL GAUGE
with (other) {
    floatid = instance_create(0,0, obj_FloatBar);
    show_debug_message(string(floatid));
    instance_destroy();
}

with (obj_FloatBar) {
    init_fuel = obj_Player.float_fuel
    remaining_fuel = obj_Player.float_fuel
    draw = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Drop">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game Over

if (invincibility) {
    with (other) {
        instance_destroy();
    }
}
else {
    room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Slime">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game Over

if (!invincibility) {
    room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Spike">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game Over

if (!invincibility) {
    room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()

if (invincibility &amp;&amp; drawShield) {
    
    draw_set_color(c_red);
    draw_set_alpha(.1);
    draw_circle(x , y, 70, false);
    draw_set_alpha(1);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
